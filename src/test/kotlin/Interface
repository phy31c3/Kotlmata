object {}
object method {}
object method object
object method object method {}

object method [object {}]

remove clear delete drop erase

[State]————————————————————————————————————————————————————————————————————————————————
// KotlmataState는 추상 클래스
KotlmataState("name") {
	entry action [action]
	entry via "signal" action [action]
	event input "signal" action [action]
	event input stateKey action [action]
	exit action [action]
}

KotlmataState {
	entry action [action]
	exit action [action]
}

val immutableState = KotlmataState() // 불가
val mutableState = KotlmataMutableState()

mutableState {
	entry action [action]
	entry via "signal" action [action]

	entry action delete
	exit action delete
	entry via any action delete
	entry via "signal" action delete
	event input all action delete
	event input "signal" action delete

	delete all actions
}

mutableState.entry() { signal ->
	event(signal)
}
mutableState.entry("signal") { signal ->
	event(signal)
}
mutableState.event("signal")
mutableState.exit()

[Machine]————————————————————————————————————————————————————————————————————————————————
KotlmataMachine("name") {
	"state0" {
		entry action [action]
		entry via "signal" action [action]
		event input "signal" action {
			// 여기서 신규 state를 어떻게 만들까?
			// immutable이면 여기서 만들 수 있어서도 안되기 때문에 원래 못 만드는 것으로 한다.
		}
		exit action [action]
	}

	"state2" {}

	"state0" x "signal" to "state1"
	"state1" x "signal" to "state2"

	initialize origin state to "state0"
}

val immutableMachine = KotlmataMachine {
	initialize origin state to "state0"
}

val mutableMachine = KotlmataMutableMachine {
	initialize origin state to "state0"
}

mutableMachine {
	"state1" {
		entry action [action]
		entry via "signal" action [action]
		event input "signal" action [action]
		exit action [action]
	} // 기본적으로 replace or add

	"state0" x "signal" to "state1" // 기본적으로 replace or add

	has state "state1" then {
		// "state1"이 존재하면 실행
	}

	has transition "state0" x "signal" then {
		// "state1"이 존재하면 실행
	}

	replace or add state "state1" of {
		// "state1"이 존재하면 교체, 존재하지 않으면 추가
	}

	replace or not state "state1" of {
		// "state1"이 존재할 경우에만 교체
	}

	update or add state "state1" of {
		// "state1"이 존재하면 업데이트, 존재하지 않으면 추가
	}

	update or not state "state1" of {
		// "state1"이 존재할 경우에만 업데이트
	}

	update or add transition "state0" x "signal" to "state1"
	update or not transition "state0" x "signal" to "state1"

	delete state "state1"
	delete transition "state0" x "signal"
	delete transition all from "state0"
	delete transition all to "state1"

	delete all states
	delete all transitions
}

/* 스택 머신 예제 */
val stack = KotlmataMutableMachine {
	initialize origin state to "floor"
}

mutableMachine.input("signal")
mutableMachine.input(object, Any::class) // <T : Any> input(signal: T, type: KClass<in T>)

[Daemon]————————————————————————————————————————————————————————————————————————————————
KotlmataDaemon("name") {
	on start [action] // 최초 시작 시
	on pause [action]
	on stop [action]
	on resume [action] // 일시정지 혹은 정지 상태에서 재개될 시
	on terminate [action] // 완전 종료 시

	// Machine init 블럭과 동일

	initialize origin state to "state0"
}.run()

val mutableDaemon = KotlmataMutableDaemon {
	on start [action]
	initialize origin state to "state0"
}

mutableDaemon {
	// Machine modify 블럭과 동일
}

mutableDaemon.run()
mutableDaemon.pause()
mutableDaemon.stop()
mutableDaemon.terminate()

mutableDaemon.input("signal")
mutableDaemon.input(object, Any::class)

[Kotlmata]————————————————————————————————————————————————————————————————————————————————
Kotlmata init {
	print...
}