object {}
object method {}
object method object
object method object method {}

object method [object {}]

remove clear delete drop erase

[State]————————————————————————————————————————————————————————————————————————————————
KotlmataState("name") { state ->
	entry action { signal ->
		[action]
	} catch { throwable ->
		[error handling]
	}
	entry via "signal" action [action]
	entry via action [action]

	input action [action]
	input signal "signal" action [action]
	input signal KClass<String> action [action]

	exit action [action]
}

val immutableState = KotlmataState() // 불가
val mutableState = KotlmataMutableState()

mutableState {
	entry action [action]
	entry via "signal" action [action]

	delete action entry
	delete action entry via "signal"
	delete action entry via all

	delete action input
	delete action input signal "signal"
	delete action input signal all

	delete action exit

	delete action all
}

immutableState.entry("signal") { signal ->
	input(signal)
}
immutableState.input("signal")
immutableState.input("signal", String::class)
immutableState.exit()

[Machine]————————————————————————————————————————————————————————————————————————————————
KotlmataMachine("name") { machine ->
	"state0" {
		entry action [action]
		entry via "signal" action [action]
		entry via ("1" or "2" or "3") action [action]
		input signal "signal" action [action]
		input signal ("1" or "2" or "3") action [action]
		exit action [action]
	}

	"state1" via String::class action [action]

	"state0" x "signal" %= "state1"
	"state1" x KClass<String> %= "state2"
	"state1" x any %= "state2"

	any x "signal" %= "state1"
	any x any %= "state2"
	"state1" x any %= "state2"

	any.of("start", "release") x "signal" %= "state1"
	any.of("start", "release") x any.of("1", "2") %= "state1"
	"state1" x any.of("1", "2") %= "state2"

	any.except("start", "release") x "signal" %= "state1"
	any.except("start", "release") x any.except("1", "2") %= "state1"
	"state1" x any.except("1", "2") %= "state2"

	chain from "state1" to "state2" to "state3" via "signal"

	on error [action]

	start at "state0"
}

val immutableMachine by KotlmataMachine.lazy("name") {
	start at "state0"
}

val mutableMachine = KotlmataMutableMachine("name") {
	start at "state0"
}

mutableMachine { machine ->
	"state1" {
		entry action [action]
		entry via "signal" action [action]
		input signal "signal" action [action]
		exit action [action]
	} // insert or replace

	"state0" x "signal" %= "state1" // insert or update

	has state "state1" then {
		// "state1"이 존재하면 실행
	} or {
		// "state1"이 존재하지 않으면 실행
	}

	has rule ("state0" x "signal") then {
		// ("state0" x "signal")이 존재하면 실행
	} or {
		// ("state0" x "signal")이 존재하지 않으면 실행
	}

	insert state "state1" with {
		// "state1" 삽입, 이미 존재하면 무시
		// Initializer
	}

	insert or replace state "state1" with {
		// "state1" 삽입, 이미 존재하면 교체
		// Initializer
    }

	replace state "state1" with {
		// "state1"이 존재할 경우에만 교체
		// Initializer
	}

	update state "state1" with {
		// "state1"이 존재할 경우에만 업데이트
		// Modifier
	} or insert state "state1" with {
		// "state1"이 존재하지 않으면 삽입
		// Initializer
	}

	insert rule ("state0" x "signal") %= "state1"
	insert or update rule ("state0" x "signal") %= "state1"
	update rule ("state0" x "signal") %= "state1"

	delete state "state1"
	delete state all

	delete rule ("state0" x "signal")
	delete rule ("state0" x any)
	delete rule (any x "signal")
	delete rule (any x any)
	delete rule of state "state1"
	delete rule all
}

mutableMachine.input("signal")
mutableMachine.input(object, Any::class) // <T : Any> input(signal: T, type: KClass<in T>)

[Daemon]————————————————————————————————————————————————————————————————————————————————
KotlmataDaemon("name") { daemon ->
	on start [action] // 최초 시작 시
	on pause [action]
	on stop [action]
	on resume [action] // 일시정지 혹은 정지 상태에서 재개될 시
	on terminate [action] // 완전 종료 시

	// Machine init 블럭과 동일

	start at "state0"
}

val mutableDaemon by KotlmataMutableDaemon.lazy("name") {
	on start [action]
	start at "state0"
}

mutableDaemon {
	// Machine modify 블럭과 동일
}

mutableDaemon.run()
mutableDaemon.pause()
mutableDaemon.stop()
mutableDaemon.terminate()

mutableDaemon.input("signal")
mutableDaemon.input("signal")
mutableDaemon.input(object, Any::class)
mutableDaemon.input(object, Any::class)

[Kotlmata]————————————————————————————————————————————————————————————————————————————————
Kotlmata.config {
	print debug { log ->
		// 로그 출력
	}
	print error { log ->
		// 로그 출력
	}
	print error { log ->
		// 로그 출력
	}
}

Kotlmata.start(logLevel = 2)
Kotlmata.stop()

Kotlmata fork "daemon" with { // Daemon init 블럭과 동일 (존재하면 무시)
	on start [action]
	on terminate [action]

	"state1" {
		entry action [action]
		entry via "signal" action [action]
		input signal "signal" action [action]
		exit action [action]
	}

	"state0" x "signal" %= "state1"

	start at "state0"
}

Kotlmata modify "daemon" with { // Daemon modify 블럭과 동일 (존재하지 않으면 무시)
	update state "state1" with {
		input signal "signal" action [action]
	} or insert state "state1" with {
		entry action [action]
		entry via "signal" action [action]
		input signal "signal" action [action]
		exit action [action]
	}
}

Kotlmata run "daemon"
Kotlmata pause "daemon"
Kotlmata stop "daemon"
Kotlmata terminate "daemon"

Kotlmata input "signal" to "daemon"
Kotlmata input "signal" `as` KClass<String> to "daemon"

Kotlmata { // Kotlmata post 와 동일
	has daemon "daemon" then {
		modify daemon "daemon" with {
			update state "state1" with {
				input signal "signal" action [action]
			} or insert state "state1" with {
				entry action [action]
				entry via "signal" action [action]
				input signal "signal" action [action]
				exit action [action]
			}
		}
	} or {
		fork daemon "daemon" with {
			on start [action]
			on terminate [action]

			"state1" {
				entry action [action]
				entry via "signal" action [action]
				input signal "signal" action [action]
				exit action [action]
			}

			"state0" x "signal" %= "state1"

			start at "state0"
		}
	} finally {
		fork daemon "daemon" with {
			on start [action]
			on terminate [action]

			"state1" {
				entry action [action]
				entry via "signal" action [action]
				input signal "signal" action [action]
				exit action [action]
			}

			"state0" x "signal" %= "state1"

			start at "state0"
		}
	}

	run daemon "daemon"
	pause daemon "daemon"

	input signal "signal" to "daemon"
	input signal "signal" priority 1 to "daemon"
	input signal "signal" `as` String::class to "daemon"
	input signal "signal" `as` String::class with "payload" priority 2 to "daemon"
}
